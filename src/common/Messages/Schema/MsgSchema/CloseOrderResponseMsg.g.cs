// <auto-generated>
//     Generated SBE (Simple Binary Encoding) message codec
// </auto-generated>

#pragma warning disable 1591 // disable warning on missing comments
using System;
using System.Text;
using Org.SbeTool.Sbe.Dll;

namespace MsgSchema
{
    /// <summary>
    /// Close order server respone.
    /// </summary>
    public sealed partial class CloseOrderResponseMsg
    {
        public const ushort BlockLength = (ushort)17;
        public const ushort TemplateId = (ushort)7;
        public const ushort SchemaId = (ushort)2;
        public const ushort SchemaVersion = (ushort)0;
        public const string SemanticType = "";

        private readonly CloseOrderResponseMsg _parentMessage;
        private DirectBuffer _buffer;
        private int _offset;
        private int _limit;
        private int _actingBlockLength;
        private int _actingVersion;

        public int Offset { get { return _offset; } }

        public CloseOrderResponseMsg()
        {
            _parentMessage = this;
        }

        public void WrapForEncode(DirectBuffer buffer, int offset)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = BlockLength;
            _actingVersion = SchemaVersion;
            Limit = offset + _actingBlockLength;
        }

        public void WrapForEncodeAndApplyHeader(DirectBuffer buffer, int offset,  MessageHeader headerEncoder)
        {
            headerEncoder.Wrap(buffer, offset, SchemaVersion);
            headerEncoder.BlockLength = BlockLength;
            headerEncoder.TemplateId = TemplateId;
            headerEncoder.SchemaId = SchemaId;
            headerEncoder.Version = SchemaVersion;
            
            WrapForEncode(buffer, offset + MessageHeader.Size);
        }

        public void WrapForDecode(DirectBuffer buffer, int offset, int actingBlockLength, int actingVersion)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = actingBlockLength;
            _actingVersion = actingVersion;
            Limit = offset + _actingBlockLength;
        }

        public int Size
        {
            get
            {
                return _limit - _offset;
            }
        }

        public int Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _buffer.CheckLimit(value);
                _limit = value;
            }
        }


        public const int SessionIdId = 1;
    public const int SessionIdSinceVersion = 0;
    public const int SessionIdDeprecated = 0;
    public bool SessionIdInActingVersion()
    {
        return _actingVersion >= SessionIdSinceVersion;
    }

        public const int SessionIdOffset = 0;

        public static string SessionIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SessionIdNullValue = (ushort)65535;
        public const ushort SessionIdMinValue = (ushort)0;
        public const ushort SessionIdMaxValue = (ushort)65534;

        public ushort SessionId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 0);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 0, value);
            }
        }


        public const int SymbolIdId = 2;
    public const int SymbolIdSinceVersion = 0;
    public const int SymbolIdDeprecated = 0;
    public bool SymbolIdInActingVersion()
    {
        return _actingVersion >= SymbolIdSinceVersion;
    }

        public const int SymbolIdOffset = 2;

        public static string SymbolIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SymbolIdNullValue = (ushort)65535;
        public const ushort SymbolIdMinValue = (ushort)0;
        public const ushort SymbolIdMaxValue = (ushort)65534;

        public ushort SymbolId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 2);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 2, value);
            }
        }


        public const int TradeIdId = 3;
    public const int TradeIdSinceVersion = 0;
    public const int TradeIdDeprecated = 0;
    public bool TradeIdInActingVersion()
    {
        return _actingVersion >= TradeIdSinceVersion;
    }

        public const int TradeIdOffset = 4;

        public static string TradeIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort TradeIdNullValue = (ushort)65535;
        public const ushort TradeIdMinValue = (ushort)0;
        public const ushort TradeIdMaxValue = (ushort)65534;

        public ushort TradeId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 4);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 4, value);
            }
        }


        public const int OrderRequestClosePriceId = 4;
    public const int OrderRequestClosePriceSinceVersion = 0;
    public const int OrderRequestClosePriceDeprecated = 0;
    public bool OrderRequestClosePriceInActingVersion()
    {
        return _actingVersion >= OrderRequestClosePriceSinceVersion;
    }

        public const int OrderRequestClosePriceOffset = 6;

        public static string OrderRequestClosePriceMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const float OrderRequestClosePriceNullValue = float.NaN;
        public const float OrderRequestClosePriceMinValue = 1.401298464324817E-45f;
        public const float OrderRequestClosePriceMaxValue = 3.4028234663852886E38f;

        public float OrderRequestClosePrice
        {
            get
            {
                return _buffer.FloatGetLittleEndian(_offset + 6);
            }
            set
            {
                _buffer.FloatPutLittleEndian(_offset + 6, value);
            }
        }


        public const int OrderFillClosePriceId = 5;
    public const int OrderFillClosePriceSinceVersion = 0;
    public const int OrderFillClosePriceDeprecated = 0;
    public bool OrderFillClosePriceInActingVersion()
    {
        return _actingVersion >= OrderFillClosePriceSinceVersion;
    }

        public const int OrderFillClosePriceOffset = 10;

        public static string OrderFillClosePriceMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const float OrderFillClosePriceNullValue = float.NaN;
        public const float OrderFillClosePriceMinValue = 1.401298464324817E-45f;
        public const float OrderFillClosePriceMaxValue = 3.4028234663852886E38f;

        public float OrderFillClosePrice
        {
            get
            {
                return _buffer.FloatGetLittleEndian(_offset + 10);
            }
            set
            {
                _buffer.FloatPutLittleEndian(_offset + 10, value);
            }
        }


        public const int OrderProcessingResultId = 6;
    public const int OrderProcessingResultSinceVersion = 0;
    public const int OrderProcessingResultDeprecated = 0;
    public bool OrderProcessingResultInActingVersion()
    {
        return _actingVersion >= OrderProcessingResultSinceVersion;
    }

        public const int OrderProcessingResultOffset = 14;

        public static string OrderProcessingResultMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public OrderProcessingResult OrderProcessingResult
        {
            get
            {
                return (OrderProcessingResult)_buffer.Uint8Get(_offset + 14);
            }
            set
            {
                _buffer.Uint8Put(_offset + 14, (byte)value);
            }
        }


        public const int ServerProcessingMsId = 7;
    public const int ServerProcessingMsSinceVersion = 0;
    public const int ServerProcessingMsDeprecated = 0;
    public bool ServerProcessingMsInActingVersion()
    {
        return _actingVersion >= ServerProcessingMsSinceVersion;
    }

        public const int ServerProcessingMsOffset = 15;

        public static string ServerProcessingMsMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const byte ServerProcessingMsNullValue = (byte)255;
        public const byte ServerProcessingMsMinValue = (byte)0;
        public const byte ServerProcessingMsMaxValue = (byte)254;

        public byte ServerProcessingMs
        {
            get
            {
                return _buffer.Uint8Get(_offset + 15);
            }
            set
            {
                _buffer.Uint8Put(_offset + 15, value);
            }
        }


        public const int OrderCloseReasonId = 8;
    public const int OrderCloseReasonSinceVersion = 0;
    public const int OrderCloseReasonDeprecated = 0;
    public bool OrderCloseReasonInActingVersion()
    {
        return _actingVersion >= OrderCloseReasonSinceVersion;
    }

        public const int OrderCloseReasonOffset = 16;

        public static string OrderCloseReasonMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public OrderCloseReason OrderCloseReason
        {
            get
            {
                return (OrderCloseReason)_buffer.Uint8Get(_offset + 16);
            }
            set
            {
                _buffer.Uint8Put(_offset + 16, (byte)value);
            }
        }


        public override string ToString()
        {
            var sb = new StringBuilder(100);
            this.BuildString(sb);
            return sb.ToString();
        }

        internal void BuildString(StringBuilder builder)
        {
            if (_buffer == null)
            {
                throw new ArgumentNullException("_buffer");
            }

            int originalLimit = this.Limit;
            this.Limit = _offset + _actingBlockLength;
            builder.Append("[CloseOrderResponseMsg](sbeTemplateId=");
            builder.Append(CloseOrderResponseMsg.TemplateId);
            builder.Append("|sbeSchemaId=");
            builder.Append(CloseOrderResponseMsg.SchemaId);
            builder.Append("|sbeSchemaVersion=");
            if (_parentMessage._actingVersion != CloseOrderResponseMsg.SchemaVersion)
            {
                builder.Append(_parentMessage._actingVersion);
                builder.Append('/');
            }
            builder.Append(CloseOrderResponseMsg.SchemaVersion);
            builder.Append("|sbeBlockLength=");
            if (_actingBlockLength != CloseOrderResponseMsg.BlockLength)
            {
                builder.Append(_actingBlockLength);
                builder.Append('/');
            }
            builder.Append(CloseOrderResponseMsg.BlockLength);
            builder.Append("):");

            builder.Append("SessionId=");
            builder.Append(this.SessionId);
            builder.Append('|');
            builder.Append("SymbolId=");
            builder.Append(this.SymbolId);
            builder.Append('|');
            builder.Append("TradeId=");
            builder.Append(this.TradeId);
            builder.Append('|');
            builder.Append("OrderRequestClosePrice=");
            builder.Append(this.OrderRequestClosePrice);
            builder.Append('|');
            builder.Append("OrderFillClosePrice=");
            builder.Append(this.OrderFillClosePrice);
            builder.Append('|');
            builder.Append("OrderProcessingResult=");
            builder.Append(this.OrderProcessingResult);
            builder.Append('|');
            builder.Append("ServerProcessingMs=");
            builder.Append(this.ServerProcessingMs);
            builder.Append('|');
            builder.Append("OrderCloseReason=");
            builder.Append(this.OrderCloseReason);

            this.Limit = originalLimit;

        }
    }
}
