// <auto-generated>
//     Generated SBE (Simple Binary Encoding) message codec
// </auto-generated>

#pragma warning disable 1591 // disable warning on missing comments
using System;
using System.Text;
using Org.SbeTool.Sbe.Dll;

namespace MsgSchema
{
    /// <summary>
    /// Test the Cloud Gateway connections.
    /// </summary>
    public sealed partial class HealthCheckMsg
    {
        public const ushort BlockLength = (ushort)13;
        public const ushort TemplateId = (ushort)2;
        public const ushort SchemaId = (ushort)6;
        public const ushort SchemaVersion = (ushort)0;
        public const string SemanticType = "";

        private readonly HealthCheckMsg _parentMessage;
        private DirectBuffer _buffer;
        private int _offset;
        private int _limit;
        private int _actingBlockLength;
        private int _actingVersion;

        public int Offset { get { return _offset; } }

        public HealthCheckMsg()
        {
            _parentMessage = this;
        }

        public void WrapForEncode(DirectBuffer buffer, int offset)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = BlockLength;
            _actingVersion = SchemaVersion;
            Limit = offset + _actingBlockLength;
        }

        public void WrapForEncodeAndApplyHeader(DirectBuffer buffer, int offset,  MessageHeader headerEncoder)
        {
            headerEncoder.Wrap(buffer, offset, SchemaVersion);
            headerEncoder.BlockLength = BlockLength;
            headerEncoder.TemplateId = TemplateId;
            headerEncoder.SchemaId = SchemaId;
            headerEncoder.Version = SchemaVersion;
            
            WrapForEncode(buffer, offset + MessageHeader.Size);
        }

        public void WrapForDecode(DirectBuffer buffer, int offset, int actingBlockLength, int actingVersion)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = actingBlockLength;
            _actingVersion = actingVersion;
            Limit = offset + _actingBlockLength;
        }

        public int Size
        {
            get
            {
                return _limit - _offset;
            }
        }

        public int Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _buffer.CheckLimit(value);
                _limit = value;
            }
        }


        public const int SequenceNumberId = 1;
    public const int SequenceNumberSinceVersion = 0;
    public const int SequenceNumberDeprecated = 0;
    public bool SequenceNumberInActingVersion()
    {
        return _actingVersion >= SequenceNumberSinceVersion;
    }

        public const int SequenceNumberOffset = 0;

        public static string SequenceNumberMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SequenceNumberNullValue = (ushort)65535;
        public const ushort SequenceNumberMinValue = (ushort)0;
        public const ushort SequenceNumberMaxValue = (ushort)65534;

        public ushort SequenceNumber
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 0);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 0, value);
            }
        }


        public const int FxBoxEngineId = 2;
    public const int FxBoxEngineSinceVersion = 0;
    public const int FxBoxEngineDeprecated = 0;
    public bool FxBoxEngineInActingVersion()
    {
        return _actingVersion >= FxBoxEngineSinceVersion;
    }

        public const int FxBoxEngineOffset = 2;

        public static string FxBoxEngineMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public FXBoxEngine FxBoxEngine
        {
            get
            {
                return (FXBoxEngine)_buffer.Uint8Get(_offset + 2);
            }
            set
            {
                _buffer.Uint8Put(_offset + 2, (byte)value);
            }
        }


        public const int StreamClientId = 3;
    public const int StreamClientSinceVersion = 0;
    public const int StreamClientDeprecated = 0;
    public bool StreamClientInActingVersion()
    {
        return _actingVersion >= StreamClientSinceVersion;
    }

        public const int StreamClientOffset = 3;

        public static string StreamClientMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public StreamClient StreamClient
        {
            get
            {
                return (StreamClient)_buffer.Uint8Get(_offset + 3);
            }
            set
            {
                _buffer.Uint8Put(_offset + 3, (byte)value);
            }
        }


        public const int StreamServerId = 4;
    public const int StreamServerSinceVersion = 0;
    public const int StreamServerDeprecated = 0;
    public bool StreamServerInActingVersion()
    {
        return _actingVersion >= StreamServerSinceVersion;
    }

        public const int StreamServerOffset = 4;

        public static string StreamServerMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public StreamServer StreamServer
        {
            get
            {
                return (StreamServer)_buffer.Uint8Get(_offset + 4);
            }
            set
            {
                _buffer.Uint8Put(_offset + 4, (byte)value);
            }
        }


        public const int TimestampClientSendId = 5;
    public const int TimestampClientSendSinceVersion = 0;
    public const int TimestampClientSendDeprecated = 0;
    public bool TimestampClientSendInActingVersion()
    {
        return _actingVersion >= TimestampClientSendSinceVersion;
    }

        public const int TimestampClientSendOffset = 5;

        public static string TimestampClientSendMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "UTCTimestamp";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long TimestampClientSendNullValue = -9223372036854775808L;
        public const long TimestampClientSendMinValue = -9223372036854775807L;
        public const long TimestampClientSendMaxValue = 9223372036854775807L;

        public long TimestampClientSend
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 5);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 5, value);
            }
        }


        public override string ToString()
        {
            var sb = new StringBuilder(100);
            this.BuildString(sb);
            return sb.ToString();
        }

        internal void BuildString(StringBuilder builder)
        {
            if (_buffer == null)
            {
                throw new ArgumentNullException("_buffer");
            }

            int originalLimit = this.Limit;
            this.Limit = _offset + _actingBlockLength;
            builder.Append("[HealthCheckMsg](sbeTemplateId=");
            builder.Append(HealthCheckMsg.TemplateId);
            builder.Append("|sbeSchemaId=");
            builder.Append(HealthCheckMsg.SchemaId);
            builder.Append("|sbeSchemaVersion=");
            if (_parentMessage._actingVersion != HealthCheckMsg.SchemaVersion)
            {
                builder.Append(_parentMessage._actingVersion);
                builder.Append('/');
            }
            builder.Append(HealthCheckMsg.SchemaVersion);
            builder.Append("|sbeBlockLength=");
            if (_actingBlockLength != HealthCheckMsg.BlockLength)
            {
                builder.Append(_actingBlockLength);
                builder.Append('/');
            }
            builder.Append(HealthCheckMsg.BlockLength);
            builder.Append("):");

            builder.Append("SequenceNumber=");
            builder.Append(this.SequenceNumber);
            builder.Append('|');
            builder.Append("FxBoxEngine=");
            builder.Append(this.FxBoxEngine);
            builder.Append('|');
            builder.Append("StreamClient=");
            builder.Append(this.StreamClient);
            builder.Append('|');
            builder.Append("StreamServer=");
            builder.Append(this.StreamServer);
            builder.Append('|');
            builder.Append("TimestampClientSend=");
            builder.Append(this.TimestampClientSend);

            this.Limit = originalLimit;

        }
    }
}
