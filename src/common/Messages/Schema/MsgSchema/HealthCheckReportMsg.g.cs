// <auto-generated>
//     Generated SBE (Simple Binary Encoding) message codec
// </auto-generated>

#pragma warning disable 1591 // disable warning on missing comments
using System;
using System.Text;
using Org.SbeTool.Sbe.Dll;

namespace MsgSchema
{
    /// <summary>
    /// Test the Cloud Gateway connections.
    /// </summary>
    public sealed partial class HealthCheckReportMsg
    {
        public const ushort BlockLength = (ushort)58;
        public const ushort TemplateId = (ushort)5;
        public const ushort SchemaId = (ushort)6;
        public const ushort SchemaVersion = (ushort)0;
        public const string SemanticType = "";

        private readonly HealthCheckReportMsg _parentMessage;
        private DirectBuffer _buffer;
        private int _offset;
        private int _limit;
        private int _actingBlockLength;
        private int _actingVersion;

        public int Offset { get { return _offset; } }

        public HealthCheckReportMsg()
        {
            _parentMessage = this;
        }

        public void WrapForEncode(DirectBuffer buffer, int offset)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = BlockLength;
            _actingVersion = SchemaVersion;
            Limit = offset + _actingBlockLength;
        }

        public void WrapForEncodeAndApplyHeader(DirectBuffer buffer, int offset,  MessageHeader headerEncoder)
        {
            headerEncoder.Wrap(buffer, offset, SchemaVersion);
            headerEncoder.BlockLength = BlockLength;
            headerEncoder.TemplateId = TemplateId;
            headerEncoder.SchemaId = SchemaId;
            headerEncoder.Version = SchemaVersion;
            
            WrapForEncode(buffer, offset + MessageHeader.Size);
        }

        public void WrapForDecode(DirectBuffer buffer, int offset, int actingBlockLength, int actingVersion)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = actingBlockLength;
            _actingVersion = actingVersion;
            Limit = offset + _actingBlockLength;
        }

        public int Size
        {
            get
            {
                return _limit - _offset;
            }
        }

        public int Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _buffer.CheckLimit(value);
                _limit = value;
            }
        }


        public const int SequenceNumberId = 1;
    public const int SequenceNumberSinceVersion = 0;
    public const int SequenceNumberDeprecated = 0;
    public bool SequenceNumberInActingVersion()
    {
        return _actingVersion >= SequenceNumberSinceVersion;
    }

        public const int SequenceNumberOffset = 0;

        public static string SequenceNumberMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SequenceNumberNullValue = (ushort)65535;
        public const ushort SequenceNumberMinValue = (ushort)0;
        public const ushort SequenceNumberMaxValue = (ushort)65534;

        public ushort SequenceNumber
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 0);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 0, value);
            }
        }


        public const int AgentToJournalId = 2;
    public const int AgentToJournalSinceVersion = 0;
    public const int AgentToJournalDeprecated = 0;
    public bool AgentToJournalInActingVersion()
    {
        return _actingVersion >= AgentToJournalSinceVersion;
    }

        public const int AgentToJournalOffset = 2;

        public static string AgentToJournalMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long AgentToJournalNullValue = -9223372036854775808L;
        public const long AgentToJournalMinValue = -9223372036854775807L;
        public const long AgentToJournalMaxValue = 9223372036854775807L;

        public long AgentToJournal
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 2);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 2, value);
            }
        }


        public const int AlgoToJournalId = 3;
    public const int AlgoToJournalSinceVersion = 0;
    public const int AlgoToJournalDeprecated = 0;
    public bool AlgoToJournalInActingVersion()
    {
        return _actingVersion >= AlgoToJournalSinceVersion;
    }

        public const int AlgoToJournalOffset = 10;

        public static string AlgoToJournalMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long AlgoToJournalNullValue = -9223372036854775808L;
        public const long AlgoToJournalMinValue = -9223372036854775807L;
        public const long AlgoToJournalMaxValue = 9223372036854775807L;

        public long AlgoToJournal
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 10);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 10, value);
            }
        }


        public const int SessionToJournalId = 4;
    public const int SessionToJournalSinceVersion = 0;
    public const int SessionToJournalDeprecated = 0;
    public bool SessionToJournalInActingVersion()
    {
        return _actingVersion >= SessionToJournalSinceVersion;
    }

        public const int SessionToJournalOffset = 18;

        public static string SessionToJournalMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long SessionToJournalNullValue = -9223372036854775808L;
        public const long SessionToJournalMinValue = -9223372036854775807L;
        public const long SessionToJournalMaxValue = 9223372036854775807L;

        public long SessionToJournal
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 18);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 18, value);
            }
        }


        public const int AlgoToMdeId = 5;
    public const int AlgoToMdeSinceVersion = 0;
    public const int AlgoToMdeDeprecated = 0;
    public bool AlgoToMdeInActingVersion()
    {
        return _actingVersion >= AlgoToMdeSinceVersion;
    }

        public const int AlgoToMdeOffset = 26;

        public static string AlgoToMdeMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long AlgoToMdeNullValue = -9223372036854775808L;
        public const long AlgoToMdeMinValue = -9223372036854775807L;
        public const long AlgoToMdeMaxValue = 9223372036854775807L;

        public long AlgoToMde
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 26);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 26, value);
            }
        }


        public const int AlgoToTdeId = 6;
    public const int AlgoToTdeSinceVersion = 0;
    public const int AlgoToTdeDeprecated = 0;
    public bool AlgoToTdeInActingVersion()
    {
        return _actingVersion >= AlgoToTdeSinceVersion;
    }

        public const int AlgoToTdeOffset = 34;

        public static string AlgoToTdeMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long AlgoToTdeNullValue = -9223372036854775808L;
        public const long AlgoToTdeMinValue = -9223372036854775807L;
        public const long AlgoToTdeMaxValue = 9223372036854775807L;

        public long AlgoToTde
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 34);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 34, value);
            }
        }


        public const int AgentToSessionId = 7;
    public const int AgentToSessionSinceVersion = 0;
    public const int AgentToSessionDeprecated = 0;
    public bool AgentToSessionInActingVersion()
    {
        return _actingVersion >= AgentToSessionSinceVersion;
    }

        public const int AgentToSessionOffset = 42;

        public static string AgentToSessionMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long AgentToSessionNullValue = -9223372036854775808L;
        public const long AgentToSessionMinValue = -9223372036854775807L;
        public const long AgentToSessionMaxValue = 9223372036854775807L;

        public long AgentToSession
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 42);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 42, value);
            }
        }


        public const int AgentToAlgoId = 8;
    public const int AgentToAlgoSinceVersion = 0;
    public const int AgentToAlgoDeprecated = 0;
    public bool AgentToAlgoInActingVersion()
    {
        return _actingVersion >= AgentToAlgoSinceVersion;
    }

        public const int AgentToAlgoOffset = 50;

        public static string AgentToAlgoMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long AgentToAlgoNullValue = -9223372036854775808L;
        public const long AgentToAlgoMinValue = -9223372036854775807L;
        public const long AgentToAlgoMaxValue = 9223372036854775807L;

        public long AgentToAlgo
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 50);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 50, value);
            }
        }


        public override string ToString()
        {
            var sb = new StringBuilder(100);
            this.BuildString(sb);
            return sb.ToString();
        }

        internal void BuildString(StringBuilder builder)
        {
            if (_buffer == null)
            {
                throw new ArgumentNullException("_buffer");
            }

            int originalLimit = this.Limit;
            this.Limit = _offset + _actingBlockLength;
            builder.Append("[HealthCheckReportMsg](sbeTemplateId=");
            builder.Append(HealthCheckReportMsg.TemplateId);
            builder.Append("|sbeSchemaId=");
            builder.Append(HealthCheckReportMsg.SchemaId);
            builder.Append("|sbeSchemaVersion=");
            if (_parentMessage._actingVersion != HealthCheckReportMsg.SchemaVersion)
            {
                builder.Append(_parentMessage._actingVersion);
                builder.Append('/');
            }
            builder.Append(HealthCheckReportMsg.SchemaVersion);
            builder.Append("|sbeBlockLength=");
            if (_actingBlockLength != HealthCheckReportMsg.BlockLength)
            {
                builder.Append(_actingBlockLength);
                builder.Append('/');
            }
            builder.Append(HealthCheckReportMsg.BlockLength);
            builder.Append("):");

            builder.Append("SequenceNumber=");
            builder.Append(this.SequenceNumber);
            builder.Append('|');
            builder.Append("AgentToJournal=");
            builder.Append(this.AgentToJournal);
            builder.Append('|');
            builder.Append("AlgoToJournal=");
            builder.Append(this.AlgoToJournal);
            builder.Append('|');
            builder.Append("SessionToJournal=");
            builder.Append(this.SessionToJournal);
            builder.Append('|');
            builder.Append("AlgoToMde=");
            builder.Append(this.AlgoToMde);
            builder.Append('|');
            builder.Append("AlgoToTde=");
            builder.Append(this.AlgoToTde);
            builder.Append('|');
            builder.Append("AgentToSession=");
            builder.Append(this.AgentToSession);
            builder.Append('|');
            builder.Append("AgentToAlgo=");
            builder.Append(this.AgentToAlgo);

            this.Limit = originalLimit;

        }
    }
}
