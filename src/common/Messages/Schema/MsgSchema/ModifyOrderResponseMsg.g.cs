// <auto-generated>
//     Generated SBE (Simple Binary Encoding) message codec
// </auto-generated>

#pragma warning disable 1591 // disable warning on missing comments
using System;
using System.Text;
using Org.SbeTool.Sbe.Dll;

namespace MsgSchema
{
    /// <summary>
    /// Modify order server respone.
    /// </summary>
    public sealed partial class ModifyOrderResponseMsg
    {
        public const ushort BlockLength = (ushort)20;
        public const ushort TemplateId = (ushort)5;
        public const ushort SchemaId = (ushort)2;
        public const ushort SchemaVersion = (ushort)0;
        public const string SemanticType = "";

        private readonly ModifyOrderResponseMsg _parentMessage;
        private DirectBuffer _buffer;
        private int _offset;
        private int _limit;
        private int _actingBlockLength;
        private int _actingVersion;

        public int Offset { get { return _offset; } }

        public ModifyOrderResponseMsg()
        {
            _parentMessage = this;
        }

        public void WrapForEncode(DirectBuffer buffer, int offset)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = BlockLength;
            _actingVersion = SchemaVersion;
            Limit = offset + _actingBlockLength;
        }

        public void WrapForEncodeAndApplyHeader(DirectBuffer buffer, int offset,  MessageHeader headerEncoder)
        {
            headerEncoder.Wrap(buffer, offset, SchemaVersion);
            headerEncoder.BlockLength = BlockLength;
            headerEncoder.TemplateId = TemplateId;
            headerEncoder.SchemaId = SchemaId;
            headerEncoder.Version = SchemaVersion;
            
            WrapForEncode(buffer, offset + MessageHeader.Size);
        }

        public void WrapForDecode(DirectBuffer buffer, int offset, int actingBlockLength, int actingVersion)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = actingBlockLength;
            _actingVersion = actingVersion;
            Limit = offset + _actingBlockLength;
        }

        public int Size
        {
            get
            {
                return _limit - _offset;
            }
        }

        public int Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _buffer.CheckLimit(value);
                _limit = value;
            }
        }


        public const int SessionIdId = 1;
    public const int SessionIdSinceVersion = 0;
    public const int SessionIdDeprecated = 0;
    public bool SessionIdInActingVersion()
    {
        return _actingVersion >= SessionIdSinceVersion;
    }

        public const int SessionIdOffset = 0;

        public static string SessionIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SessionIdNullValue = (ushort)65535;
        public const ushort SessionIdMinValue = (ushort)0;
        public const ushort SessionIdMaxValue = (ushort)65534;

        public ushort SessionId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 0);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 0, value);
            }
        }


        public const int SymbolIdId = 2;
    public const int SymbolIdSinceVersion = 0;
    public const int SymbolIdDeprecated = 0;
    public bool SymbolIdInActingVersion()
    {
        return _actingVersion >= SymbolIdSinceVersion;
    }

        public const int SymbolIdOffset = 2;

        public static string SymbolIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SymbolIdNullValue = (ushort)65535;
        public const ushort SymbolIdMinValue = (ushort)0;
        public const ushort SymbolIdMaxValue = (ushort)65534;

        public ushort SymbolId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 2);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 2, value);
            }
        }


        public const int TradeIdId = 3;
    public const int TradeIdSinceVersion = 0;
    public const int TradeIdDeprecated = 0;
    public bool TradeIdInActingVersion()
    {
        return _actingVersion >= TradeIdSinceVersion;
    }

        public const int TradeIdOffset = 4;

        public static string TradeIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort TradeIdNullValue = (ushort)65535;
        public const ushort TradeIdMinValue = (ushort)0;
        public const ushort TradeIdMaxValue = (ushort)65534;

        public ushort TradeId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 4);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 4, value);
            }
        }


        public const int OrderRequestPriceId = 4;
    public const int OrderRequestPriceSinceVersion = 0;
    public const int OrderRequestPriceDeprecated = 0;
    public bool OrderRequestPriceInActingVersion()
    {
        return _actingVersion >= OrderRequestPriceSinceVersion;
    }

        public const int OrderRequestPriceOffset = 6;

        public static string OrderRequestPriceMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const float OrderRequestPriceNullValue = float.NaN;
        public const float OrderRequestPriceMinValue = 1.401298464324817E-45f;
        public const float OrderRequestPriceMaxValue = 3.4028234663852886E38f;

        public float OrderRequestPrice
        {
            get
            {
                return _buffer.FloatGetLittleEndian(_offset + 6);
            }
            set
            {
                _buffer.FloatPutLittleEndian(_offset + 6, value);
            }
        }


        public const int OrderStopLossPriceId = 5;
    public const int OrderStopLossPriceSinceVersion = 0;
    public const int OrderStopLossPriceDeprecated = 0;
    public bool OrderStopLossPriceInActingVersion()
    {
        return _actingVersion >= OrderStopLossPriceSinceVersion;
    }

        public const int OrderStopLossPriceOffset = 10;

        public static string OrderStopLossPriceMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const float OrderStopLossPriceNullValue = float.NaN;
        public const float OrderStopLossPriceMinValue = 1.401298464324817E-45f;
        public const float OrderStopLossPriceMaxValue = 3.4028234663852886E38f;

        public float OrderStopLossPrice
        {
            get
            {
                return _buffer.FloatGetLittleEndian(_offset + 10);
            }
            set
            {
                _buffer.FloatPutLittleEndian(_offset + 10, value);
            }
        }


        public const int OrderTakeProfitPriceId = 6;
    public const int OrderTakeProfitPriceSinceVersion = 0;
    public const int OrderTakeProfitPriceDeprecated = 0;
    public bool OrderTakeProfitPriceInActingVersion()
    {
        return _actingVersion >= OrderTakeProfitPriceSinceVersion;
    }

        public const int OrderTakeProfitPriceOffset = 14;

        public static string OrderTakeProfitPriceMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const float OrderTakeProfitPriceNullValue = float.NaN;
        public const float OrderTakeProfitPriceMinValue = 1.401298464324817E-45f;
        public const float OrderTakeProfitPriceMaxValue = 3.4028234663852886E38f;

        public float OrderTakeProfitPrice
        {
            get
            {
                return _buffer.FloatGetLittleEndian(_offset + 14);
            }
            set
            {
                _buffer.FloatPutLittleEndian(_offset + 14, value);
            }
        }


        public const int OrderProcessingResultId = 7;
    public const int OrderProcessingResultSinceVersion = 0;
    public const int OrderProcessingResultDeprecated = 0;
    public bool OrderProcessingResultInActingVersion()
    {
        return _actingVersion >= OrderProcessingResultSinceVersion;
    }

        public const int OrderProcessingResultOffset = 18;

        public static string OrderProcessingResultMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public OrderProcessingResult OrderProcessingResult
        {
            get
            {
                return (OrderProcessingResult)_buffer.Uint8Get(_offset + 18);
            }
            set
            {
                _buffer.Uint8Put(_offset + 18, (byte)value);
            }
        }


        public const int ServerProcessingMsId = 8;
    public const int ServerProcessingMsSinceVersion = 0;
    public const int ServerProcessingMsDeprecated = 0;
    public bool ServerProcessingMsInActingVersion()
    {
        return _actingVersion >= ServerProcessingMsSinceVersion;
    }

        public const int ServerProcessingMsOffset = 19;

        public static string ServerProcessingMsMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const byte ServerProcessingMsNullValue = (byte)255;
        public const byte ServerProcessingMsMinValue = (byte)0;
        public const byte ServerProcessingMsMaxValue = (byte)254;

        public byte ServerProcessingMs
        {
            get
            {
                return _buffer.Uint8Get(_offset + 19);
            }
            set
            {
                _buffer.Uint8Put(_offset + 19, value);
            }
        }


        public override string ToString()
        {
            var sb = new StringBuilder(100);
            this.BuildString(sb);
            return sb.ToString();
        }

        internal void BuildString(StringBuilder builder)
        {
            if (_buffer == null)
            {
                throw new ArgumentNullException("_buffer");
            }

            int originalLimit = this.Limit;
            this.Limit = _offset + _actingBlockLength;
            builder.Append("[ModifyOrderResponseMsg](sbeTemplateId=");
            builder.Append(ModifyOrderResponseMsg.TemplateId);
            builder.Append("|sbeSchemaId=");
            builder.Append(ModifyOrderResponseMsg.SchemaId);
            builder.Append("|sbeSchemaVersion=");
            if (_parentMessage._actingVersion != ModifyOrderResponseMsg.SchemaVersion)
            {
                builder.Append(_parentMessage._actingVersion);
                builder.Append('/');
            }
            builder.Append(ModifyOrderResponseMsg.SchemaVersion);
            builder.Append("|sbeBlockLength=");
            if (_actingBlockLength != ModifyOrderResponseMsg.BlockLength)
            {
                builder.Append(_actingBlockLength);
                builder.Append('/');
            }
            builder.Append(ModifyOrderResponseMsg.BlockLength);
            builder.Append("):");

            builder.Append("SessionId=");
            builder.Append(this.SessionId);
            builder.Append('|');
            builder.Append("SymbolId=");
            builder.Append(this.SymbolId);
            builder.Append('|');
            builder.Append("TradeId=");
            builder.Append(this.TradeId);
            builder.Append('|');
            builder.Append("OrderRequestPrice=");
            builder.Append(this.OrderRequestPrice);
            builder.Append('|');
            builder.Append("OrderStopLossPrice=");
            builder.Append(this.OrderStopLossPrice);
            builder.Append('|');
            builder.Append("OrderTakeProfitPrice=");
            builder.Append(this.OrderTakeProfitPrice);
            builder.Append('|');
            builder.Append("OrderProcessingResult=");
            builder.Append(this.OrderProcessingResult);
            builder.Append('|');
            builder.Append("ServerProcessingMs=");
            builder.Append(this.ServerProcessingMs);

            this.Limit = originalLimit;

        }
    }
}
