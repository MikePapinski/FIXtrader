// <auto-generated>
//     Generated SBE (Simple Binary Encoding) message codec
// </auto-generated>

#pragma warning disable 1591 // disable warning on missing comments
using System;
using System.Text;
using Org.SbeTool.Sbe.Dll;

namespace MsgSchema
{
    /// <summary>
    /// New market data arrived with level 1 depth.
    /// </summary>
    public sealed partial class NewMarketDataLevelOneMsg
    {
        public const ushort BlockLength = (ushort)24;
        public const ushort TemplateId = (ushort)2;
        public const ushort SchemaId = (ushort)1;
        public const ushort SchemaVersion = (ushort)0;
        public const string SemanticType = "";

        private readonly NewMarketDataLevelOneMsg _parentMessage;
        private DirectBuffer _buffer;
        private int _offset;
        private int _limit;
        private int _actingBlockLength;
        private int _actingVersion;

        public int Offset { get { return _offset; } }

        public NewMarketDataLevelOneMsg()
        {
            _parentMessage = this;
        }

        public void WrapForEncode(DirectBuffer buffer, int offset)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = BlockLength;
            _actingVersion = SchemaVersion;
            Limit = offset + _actingBlockLength;
        }

        public void WrapForEncodeAndApplyHeader(DirectBuffer buffer, int offset,  MessageHeader headerEncoder)
        {
            headerEncoder.Wrap(buffer, offset, SchemaVersion);
            headerEncoder.BlockLength = BlockLength;
            headerEncoder.TemplateId = TemplateId;
            headerEncoder.SchemaId = SchemaId;
            headerEncoder.Version = SchemaVersion;
            
            WrapForEncode(buffer, offset + MessageHeader.Size);
        }

        public void WrapForDecode(DirectBuffer buffer, int offset, int actingBlockLength, int actingVersion)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = actingBlockLength;
            _actingVersion = actingVersion;
            Limit = offset + _actingBlockLength;
        }

        public int Size
        {
            get
            {
                return _limit - _offset;
            }
        }

        public int Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _buffer.CheckLimit(value);
                _limit = value;
            }
        }


        public const int SessionIdId = 1;
    public const int SessionIdSinceVersion = 0;
    public const int SessionIdDeprecated = 0;
    public bool SessionIdInActingVersion()
    {
        return _actingVersion >= SessionIdSinceVersion;
    }

        public const int SessionIdOffset = 0;

        public static string SessionIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SessionIdNullValue = (ushort)65535;
        public const ushort SessionIdMinValue = (ushort)0;
        public const ushort SessionIdMaxValue = (ushort)65534;

        public ushort SessionId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 0);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 0, value);
            }
        }


        public const int SymbolIdId = 2;
    public const int SymbolIdSinceVersion = 0;
    public const int SymbolIdDeprecated = 0;
    public bool SymbolIdInActingVersion()
    {
        return _actingVersion >= SymbolIdSinceVersion;
    }

        public const int SymbolIdOffset = 2;

        public static string SymbolIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SymbolIdNullValue = (ushort)65535;
        public const ushort SymbolIdMinValue = (ushort)0;
        public const ushort SymbolIdMaxValue = (ushort)65534;

        public ushort SymbolId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 2);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 2, value);
            }
        }


        public const int AskBestId = 3;
    public const int AskBestSinceVersion = 0;
    public const int AskBestDeprecated = 0;
    public bool AskBestInActingVersion()
    {
        return _actingVersion >= AskBestSinceVersion;
    }

        public const int AskBestOffset = 4;

        public static string AskBestMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const float AskBestNullValue = float.NaN;
        public const float AskBestMinValue = 1.401298464324817E-45f;
        public const float AskBestMaxValue = 3.4028234663852886E38f;

        public float AskBest
        {
            get
            {
                return _buffer.FloatGetLittleEndian(_offset + 4);
            }
            set
            {
                _buffer.FloatPutLittleEndian(_offset + 4, value);
            }
        }


        public const int BidBestId = 4;
    public const int BidBestSinceVersion = 0;
    public const int BidBestDeprecated = 0;
    public bool BidBestInActingVersion()
    {
        return _actingVersion >= BidBestSinceVersion;
    }

        public const int BidBestOffset = 8;

        public static string BidBestMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const float BidBestNullValue = float.NaN;
        public const float BidBestMinValue = 1.401298464324817E-45f;
        public const float BidBestMaxValue = 3.4028234663852886E38f;

        public float BidBest
        {
            get
            {
                return _buffer.FloatGetLittleEndian(_offset + 8);
            }
            set
            {
                _buffer.FloatPutLittleEndian(_offset + 8, value);
            }
        }


        public const int AskVolumeBestId = 5;
    public const int AskVolumeBestSinceVersion = 0;
    public const int AskVolumeBestDeprecated = 0;
    public bool AskVolumeBestInActingVersion()
    {
        return _actingVersion >= AskVolumeBestSinceVersion;
    }

        public const int AskVolumeBestOffset = 12;

        public static string AskVolumeBestMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort AskVolumeBestNullValue = (ushort)65535;
        public const ushort AskVolumeBestMinValue = (ushort)0;
        public const ushort AskVolumeBestMaxValue = (ushort)65534;

        public ushort AskVolumeBest
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 12);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 12, value);
            }
        }


        public const int BidVolumeBestId = 6;
    public const int BidVolumeBestSinceVersion = 0;
    public const int BidVolumeBestDeprecated = 0;
    public bool BidVolumeBestInActingVersion()
    {
        return _actingVersion >= BidVolumeBestSinceVersion;
    }

        public const int BidVolumeBestOffset = 14;

        public static string BidVolumeBestMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort BidVolumeBestNullValue = (ushort)65535;
        public const ushort BidVolumeBestMinValue = (ushort)0;
        public const ushort BidVolumeBestMaxValue = (ushort)65534;

        public ushort BidVolumeBest
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 14);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 14, value);
            }
        }


        public const int TimestampId = 7;
    public const int TimestampSinceVersion = 0;
    public const int TimestampDeprecated = 0;
    public bool TimestampInActingVersion()
    {
        return _actingVersion >= TimestampSinceVersion;
    }

        public const int TimestampOffset = 16;

        public static string TimestampMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long TimestampNullValue = -9223372036854775808L;
        public const long TimestampMinValue = -9223372036854775807L;
        public const long TimestampMaxValue = 9223372036854775807L;

        public long Timestamp
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 16);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 16, value);
            }
        }


        public override string ToString()
        {
            var sb = new StringBuilder(100);
            this.BuildString(sb);
            return sb.ToString();
        }

        internal void BuildString(StringBuilder builder)
        {
            if (_buffer == null)
            {
                throw new ArgumentNullException("_buffer");
            }

            int originalLimit = this.Limit;
            this.Limit = _offset + _actingBlockLength;
            builder.Append("[NewMarketDataLevelOneMsg](sbeTemplateId=");
            builder.Append(NewMarketDataLevelOneMsg.TemplateId);
            builder.Append("|sbeSchemaId=");
            builder.Append(NewMarketDataLevelOneMsg.SchemaId);
            builder.Append("|sbeSchemaVersion=");
            if (_parentMessage._actingVersion != NewMarketDataLevelOneMsg.SchemaVersion)
            {
                builder.Append(_parentMessage._actingVersion);
                builder.Append('/');
            }
            builder.Append(NewMarketDataLevelOneMsg.SchemaVersion);
            builder.Append("|sbeBlockLength=");
            if (_actingBlockLength != NewMarketDataLevelOneMsg.BlockLength)
            {
                builder.Append(_actingBlockLength);
                builder.Append('/');
            }
            builder.Append(NewMarketDataLevelOneMsg.BlockLength);
            builder.Append("):");

            builder.Append("SessionId=");
            builder.Append(this.SessionId);
            builder.Append('|');
            builder.Append("SymbolId=");
            builder.Append(this.SymbolId);
            builder.Append('|');
            builder.Append("AskBest=");
            builder.Append(this.AskBest);
            builder.Append('|');
            builder.Append("BidBest=");
            builder.Append(this.BidBest);
            builder.Append('|');
            builder.Append("AskVolumeBest=");
            builder.Append(this.AskVolumeBest);
            builder.Append('|');
            builder.Append("BidVolumeBest=");
            builder.Append(this.BidVolumeBest);
            builder.Append('|');
            builder.Append("Timestamp=");
            builder.Append(this.Timestamp);

            this.Limit = originalLimit;

        }
    }
}
