// <auto-generated>
//     Generated SBE (Simple Binary Encoding) message codec
// </auto-generated>

#pragma warning disable 1591 // disable warning on missing comments
using System;
using System.Text;
using Org.SbeTool.Sbe.Dll;

namespace MsgSchema
{
    /// <summary>
    /// New market data arrived with level 2 depth.
    /// </summary>
    public sealed partial class NewMarketDataLevelTwoMsg
    {
        public const ushort BlockLength = (ushort)412;
        public const ushort TemplateId = (ushort)3;
        public const ushort SchemaId = (ushort)1;
        public const ushort SchemaVersion = (ushort)0;
        public const string SemanticType = "";

        private readonly NewMarketDataLevelTwoMsg _parentMessage;
        private DirectBuffer _buffer;
        private int _offset;
        private int _limit;
        private int _actingBlockLength;
        private int _actingVersion;

        public int Offset { get { return _offset; } }

        public NewMarketDataLevelTwoMsg()
        {
            _parentMessage = this;
        }

        public void WrapForEncode(DirectBuffer buffer, int offset)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = BlockLength;
            _actingVersion = SchemaVersion;
            Limit = offset + _actingBlockLength;
        }

        public void WrapForEncodeAndApplyHeader(DirectBuffer buffer, int offset,  MessageHeader headerEncoder)
        {
            headerEncoder.Wrap(buffer, offset, SchemaVersion);
            headerEncoder.BlockLength = BlockLength;
            headerEncoder.TemplateId = TemplateId;
            headerEncoder.SchemaId = SchemaId;
            headerEncoder.Version = SchemaVersion;
            
            WrapForEncode(buffer, offset + MessageHeader.Size);
        }

        public void WrapForDecode(DirectBuffer buffer, int offset, int actingBlockLength, int actingVersion)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = actingBlockLength;
            _actingVersion = actingVersion;
            Limit = offset + _actingBlockLength;
        }

        public int Size
        {
            get
            {
                return _limit - _offset;
            }
        }

        public int Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _buffer.CheckLimit(value);
                _limit = value;
            }
        }


        public const int SessionIdId = 1;
    public const int SessionIdSinceVersion = 0;
    public const int SessionIdDeprecated = 0;
    public bool SessionIdInActingVersion()
    {
        return _actingVersion >= SessionIdSinceVersion;
    }

        public const int SessionIdOffset = 0;

        public static string SessionIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SessionIdNullValue = (ushort)65535;
        public const ushort SessionIdMinValue = (ushort)0;
        public const ushort SessionIdMaxValue = (ushort)65534;

        public ushort SessionId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 0);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 0, value);
            }
        }


        public const int SymbolIdId = 2;
    public const int SymbolIdSinceVersion = 0;
    public const int SymbolIdDeprecated = 0;
    public bool SymbolIdInActingVersion()
    {
        return _actingVersion >= SymbolIdSinceVersion;
    }

        public const int SymbolIdOffset = 2;

        public static string SymbolIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort SymbolIdNullValue = (ushort)65535;
        public const ushort SymbolIdMinValue = (ushort)0;
        public const ushort SymbolIdMaxValue = (ushort)65534;

        public ushort SymbolId
        {
            get
            {
                return _buffer.Uint16GetLittleEndian(_offset + 2);
            }
            set
            {
                _buffer.Uint16PutLittleEndian(_offset + 2, value);
            }
        }


        public const int AskDepthId = 3;
    public const int AskDepthSinceVersion = 0;
    public const int AskDepthDeprecated = 0;
    public bool AskDepthInActingVersion()
    {
        return _actingVersion >= AskDepthSinceVersion;
    }

        public const int AskDepthOffset = 4;

        public static string AskDepthMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort AskDepthNullValue = (ushort)65535;
        public const ushort AskDepthMinValue = (ushort)0;
        public const ushort AskDepthMaxValue = (ushort)65534;

        public const int AskDepthLength = 50;

        public ushort GetAskDepth(int index)
        {
            if ((uint) index >= 50)
            {
                ThrowHelper.ThrowIndexOutOfRangeException(index);
            }

            return _buffer.Uint16GetLittleEndian(_offset + 4 + (index * 2));
        }

        public void SetAskDepth(int index, ushort value)
        {
            if ((uint) index >= 50)
            {
                ThrowHelper.ThrowIndexOutOfRangeException(index);
            }

            _buffer.Uint16PutLittleEndian(_offset + 4 + (index * 2), value);
        }

        public ReadOnlySpan<ushort> AskDepth
        {
            get => _buffer.AsReadOnlySpan<ushort>(_offset + 4, AskDepthLength);
            set => value.CopyTo(_buffer.AsSpan<ushort>(_offset + 4, AskDepthLength));
        }

        public Span<ushort> AskDepthAsSpan()
        {
            return _buffer.AsSpan<ushort>(_offset + 4, AskDepthLength);
        }

        public const int BidDepthId = 4;
    public const int BidDepthSinceVersion = 0;
    public const int BidDepthDeprecated = 0;
    public bool BidDepthInActingVersion()
    {
        return _actingVersion >= BidDepthSinceVersion;
    }

        public const int BidDepthOffset = 104;

        public static string BidDepthMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort BidDepthNullValue = (ushort)65535;
        public const ushort BidDepthMinValue = (ushort)0;
        public const ushort BidDepthMaxValue = (ushort)65534;

        public const int BidDepthLength = 50;

        public ushort GetBidDepth(int index)
        {
            if ((uint) index >= 50)
            {
                ThrowHelper.ThrowIndexOutOfRangeException(index);
            }

            return _buffer.Uint16GetLittleEndian(_offset + 104 + (index * 2));
        }

        public void SetBidDepth(int index, ushort value)
        {
            if ((uint) index >= 50)
            {
                ThrowHelper.ThrowIndexOutOfRangeException(index);
            }

            _buffer.Uint16PutLittleEndian(_offset + 104 + (index * 2), value);
        }

        public ReadOnlySpan<ushort> BidDepth
        {
            get => _buffer.AsReadOnlySpan<ushort>(_offset + 104, BidDepthLength);
            set => value.CopyTo(_buffer.AsSpan<ushort>(_offset + 104, BidDepthLength));
        }

        public Span<ushort> BidDepthAsSpan()
        {
            return _buffer.AsSpan<ushort>(_offset + 104, BidDepthLength);
        }

        public const int AskVolumeDepthId = 5;
    public const int AskVolumeDepthSinceVersion = 0;
    public const int AskVolumeDepthDeprecated = 0;
    public bool AskVolumeDepthInActingVersion()
    {
        return _actingVersion >= AskVolumeDepthSinceVersion;
    }

        public const int AskVolumeDepthOffset = 204;

        public static string AskVolumeDepthMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort AskVolumeDepthNullValue = (ushort)65535;
        public const ushort AskVolumeDepthMinValue = (ushort)0;
        public const ushort AskVolumeDepthMaxValue = (ushort)65534;

        public const int AskVolumeDepthLength = 50;

        public ushort GetAskVolumeDepth(int index)
        {
            if ((uint) index >= 50)
            {
                ThrowHelper.ThrowIndexOutOfRangeException(index);
            }

            return _buffer.Uint16GetLittleEndian(_offset + 204 + (index * 2));
        }

        public void SetAskVolumeDepth(int index, ushort value)
        {
            if ((uint) index >= 50)
            {
                ThrowHelper.ThrowIndexOutOfRangeException(index);
            }

            _buffer.Uint16PutLittleEndian(_offset + 204 + (index * 2), value);
        }

        public ReadOnlySpan<ushort> AskVolumeDepth
        {
            get => _buffer.AsReadOnlySpan<ushort>(_offset + 204, AskVolumeDepthLength);
            set => value.CopyTo(_buffer.AsSpan<ushort>(_offset + 204, AskVolumeDepthLength));
        }

        public Span<ushort> AskVolumeDepthAsSpan()
        {
            return _buffer.AsSpan<ushort>(_offset + 204, AskVolumeDepthLength);
        }

        public const int BidVolumeDepthId = 6;
    public const int BidVolumeDepthSinceVersion = 0;
    public const int BidVolumeDepthDeprecated = 0;
    public bool BidVolumeDepthInActingVersion()
    {
        return _actingVersion >= BidVolumeDepthSinceVersion;
    }

        public const int BidVolumeDepthOffset = 304;

        public static string BidVolumeDepthMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ushort BidVolumeDepthNullValue = (ushort)65535;
        public const ushort BidVolumeDepthMinValue = (ushort)0;
        public const ushort BidVolumeDepthMaxValue = (ushort)65534;

        public const int BidVolumeDepthLength = 50;

        public ushort GetBidVolumeDepth(int index)
        {
            if ((uint) index >= 50)
            {
                ThrowHelper.ThrowIndexOutOfRangeException(index);
            }

            return _buffer.Uint16GetLittleEndian(_offset + 304 + (index * 2));
        }

        public void SetBidVolumeDepth(int index, ushort value)
        {
            if ((uint) index >= 50)
            {
                ThrowHelper.ThrowIndexOutOfRangeException(index);
            }

            _buffer.Uint16PutLittleEndian(_offset + 304 + (index * 2), value);
        }

        public ReadOnlySpan<ushort> BidVolumeDepth
        {
            get => _buffer.AsReadOnlySpan<ushort>(_offset + 304, BidVolumeDepthLength);
            set => value.CopyTo(_buffer.AsSpan<ushort>(_offset + 304, BidVolumeDepthLength));
        }

        public Span<ushort> BidVolumeDepthAsSpan()
        {
            return _buffer.AsSpan<ushort>(_offset + 304, BidVolumeDepthLength);
        }

        public const int TimestampId = 7;
    public const int TimestampSinceVersion = 0;
    public const int TimestampDeprecated = 0;
    public bool TimestampInActingVersion()
    {
        return _actingVersion >= TimestampSinceVersion;
    }

        public const int TimestampOffset = 404;

        public static string TimestampMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const long TimestampNullValue = -9223372036854775808L;
        public const long TimestampMinValue = -9223372036854775807L;
        public const long TimestampMaxValue = 9223372036854775807L;

        public long Timestamp
        {
            get
            {
                return _buffer.Int64GetLittleEndian(_offset + 404);
            }
            set
            {
                _buffer.Int64PutLittleEndian(_offset + 404, value);
            }
        }


        public override string ToString()
        {
            var sb = new StringBuilder(100);
            this.BuildString(sb);
            return sb.ToString();
        }

        internal void BuildString(StringBuilder builder)
        {
            if (_buffer == null)
            {
                throw new ArgumentNullException("_buffer");
            }

            int originalLimit = this.Limit;
            this.Limit = _offset + _actingBlockLength;
            builder.Append("[NewMarketDataLevelTwoMsg](sbeTemplateId=");
            builder.Append(NewMarketDataLevelTwoMsg.TemplateId);
            builder.Append("|sbeSchemaId=");
            builder.Append(NewMarketDataLevelTwoMsg.SchemaId);
            builder.Append("|sbeSchemaVersion=");
            if (_parentMessage._actingVersion != NewMarketDataLevelTwoMsg.SchemaVersion)
            {
                builder.Append(_parentMessage._actingVersion);
                builder.Append('/');
            }
            builder.Append(NewMarketDataLevelTwoMsg.SchemaVersion);
            builder.Append("|sbeBlockLength=");
            if (_actingBlockLength != NewMarketDataLevelTwoMsg.BlockLength)
            {
                builder.Append(_actingBlockLength);
                builder.Append('/');
            }
            builder.Append(NewMarketDataLevelTwoMsg.BlockLength);
            builder.Append("):");

            builder.Append("SessionId=");
            builder.Append(this.SessionId);
            builder.Append('|');
            builder.Append("SymbolId=");
            builder.Append(this.SymbolId);
            builder.Append('|');
            builder.Append("AskDepth=");
            builder.Append('[');
            for (int i = 0; i < AskDepthLength; ++i)
            {
                if (i > 0)
                {
                    builder.Append(',');
                }
                builder.Append(GetAskDepth(i));
            }
            builder.Append(']');
            builder.Append('|');
            builder.Append("BidDepth=");
            builder.Append('[');
            for (int i = 0; i < BidDepthLength; ++i)
            {
                if (i > 0)
                {
                    builder.Append(',');
                }
                builder.Append(GetBidDepth(i));
            }
            builder.Append(']');
            builder.Append('|');
            builder.Append("AskVolumeDepth=");
            builder.Append('[');
            for (int i = 0; i < AskVolumeDepthLength; ++i)
            {
                if (i > 0)
                {
                    builder.Append(',');
                }
                builder.Append(GetAskVolumeDepth(i));
            }
            builder.Append(']');
            builder.Append('|');
            builder.Append("BidVolumeDepth=");
            builder.Append('[');
            for (int i = 0; i < BidVolumeDepthLength; ++i)
            {
                if (i > 0)
                {
                    builder.Append(',');
                }
                builder.Append(GetBidVolumeDepth(i));
            }
            builder.Append(']');
            builder.Append('|');
            builder.Append("Timestamp=");
            builder.Append(this.Timestamp);

            this.Limit = originalLimit;

        }
    }
}
